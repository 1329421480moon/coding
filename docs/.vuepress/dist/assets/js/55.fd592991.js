(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{306:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"深入掌握vue-js-中的prop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入掌握vue-js-中的prop","aria-hidden":"true"}},[e._v("#")]),e._v(" 深入掌握Vue.js 中的Prop")]),e._v(" "),n("blockquote",[n("p",[e._v("向军大叔 @ "),n("a",{attrs:{href:"http://www.aoxiangjun.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("aoxiangjun.com"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("prop是向了组件传递数据的机制，但很多同学对他不是很了解。向军大叔通过实例详细讲解一下正确的使用方法。")]),e._v(" "),n("p",[e._v("下面的代码是绑定数据的最简单方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input v-model="content"/>\n')])])]),n("p",[e._v("他的原理是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input :value="content" @input="content = $event.target.value"/>\n')])])]),n("p",[e._v("即当我们修改表单（表单可以理解为一个子组件）时，表单使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@change=\"$emit('input',$event)\"\n")])])]),n("p",[e._v("触发父级组件的input事件，并将表单实例传递给父级元素，父级元素通过 "),n("code",[e._v("$event")]),e._v(" 获取子组件的"),n("code",[e._v("value")]),e._v(" 值，并赋予父组件的 content 属性。")]),e._v(" "),n("p",[e._v("上面是对 v-model 指令的运行机制讲解，对这方面知识了解后，我们可以对自定义的组件使用 "),n("code",[e._v("v-model")]),e._v(" 以达到父子组件数据模拟双向同步的结果。")]),e._v(" "),n("h2",{attrs:{id:"实操"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实操","aria-hidden":"true"}},[e._v("#")]),e._v(" 实操")]),e._v(" "),n("p",[e._v("下面我们通过一个markdown编辑器插件，并使用上面的原理达到数据双向同步。")]),e._v(" "),n("p",[e._v("开发环境是大叔在 "),n("code",[e._v("laravel5.7")]),e._v(" 框架中完成，因为laravel本身内置对vue.js的支持。")]),e._v(" "),n("h3",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cnpm install mavon-editor --save\n")])])]),n("h3",{attrs:{id:"编辑器组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编辑器组件","aria-hidden":"true"}},[e._v("#")]),e._v(" 编辑器组件")]),e._v(" "),n("p",[e._v("创建组件 "),n("code",[e._v("resource/js/components/MarkdownEditorComponent.vue")]),e._v(" ，主要是定义编辑器插件。")]),e._v(" "),n("p",[e._v("其中声明的 prop value用于接收父组件数据，其他定义了 "),n("code",[e._v("@change=\"$emit('input',$event)\"")]),e._v(" 方法处罚父组件的 input 事件（这就是大叔带大家上面分析的业务）。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n    <div>\n        <mavon-editor ref=\"md\" v-model=\"content\" :toolbars=\"toolbars\" @imgAdd=\"$imgAdd\" @change=\"$emit('input',$event)\"/>\n    </div>\n</template>\n<script>\n    import 'mavon-editor/dist/css/index.css';\n    import {mavonEditor} from 'mavon-editor'\n    export default {\n        props: [\n            'value'\n        ],\n        components: {\n            mavonEditor\n        },\n        methods: {\n            // 绑定@imgAdd event\n            $imgAdd(pos, $file) {\n                // 第一步.将图片上传到服务器.\n                let formdata = new FormData();\n                formdata.append('file', $file);\n                axios({\n                    url: 'http://hdcms.test/common/upload/upload',\n                    method: 'post',\n                    data: formdata,\n                    headers: {'Content-Type': 'multipart/form-data'},\n                }).then((url) => {\n                    this.$refs.md.$img2Url(pos, url.data.file);\n                })\n            }\n        },\n        data() {\n            return {\n                content: this.value,\n                toolbars: {\n                    bold: true, // 粗体\n                    italic: true, // 斜体\n                    header: true, // 标题\n                    underline: true, // 下划线\n                    strikethrough: true, // 中划线\n                    mark: true, // 标记\n                    superscript: false, // 上角标\n                    subscript: false, // 下角标\n                    quote: true, // 引用\n                    ol: true, // 有序列表\n                    ul: true, // 无序列表\n                    link: true, // 链接\n                    imagelink: true, // 图片链接\n                    code: true, // code\n                    table: true, // 表格\n                    fullscreen: true, // 全屏编辑\n                    readmodel: true, // 沉浸式阅读\n                    htmlcode: true, // 展示html源码\n                    help: true, // 帮助\n                    /* 1.3.5 */\n                    undo: true, // 上一步\n                    redo: true, // 下一步\n                    trash: true, // 清空\n                    save: false, // 保存（触发events中的save事件）\n                    /* 1.4.2 */\n                    navigation: true, // 导航目录\n                    /* 2.1.8 */\n                    alignleft: true, // 左对齐\n                    aligncenter: true, // 居中\n                    alignright: true, // 右对齐\n                    /* 2.2.1 */\n                    subfield: true, // 单双栏模式\n                    preview: true, // 预览\n                }\n            }\n        }\n    }\n<\/script>\n")])])]),n("p",[e._v("在 "),n("code",[e._v("resources/js/app.js")]),e._v(" 添加内容如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("...\nVue.component('edit', require('./components/EditComponent.vue'));\n...\n")])])]),n("h3",{attrs:{id:"使用编辑器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用编辑器","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用编辑器")]),e._v(" "),n("p",[e._v("现在我们在父组件 "),n("code",[e._v("/components/EditComponent.vue")]),e._v(" 中使用定义的编辑器组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<template>\n    <div class=\"container\">\n        <markdown-editor v-model=\"value\"/>\n        \x3c!--观察数据同步--\x3e\n\t\t<p>{{value}}</p>\n    </div>\n</template>\n\n<script>\n\t#引入组件\n    import MarkdownEditor from './MarkdownEditorComponent'\n    export default {\n        components:{\n        \t#引入组件\n            'markdown-editor':MarkdownEditor\n        },\n        data(){\n            return {\n                value:'后盾人@向军大叔'\n            }\n        },\n        mounted() {\n            console.log('Component mounted.')\n        }\n    }\n<\/script>\n")])])]),n("p",[e._v("结果如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"assets/image-20181118220416359.png",alt:"image-20181118220416359"}})]),e._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("总结一下使用 v-model 的技巧")]),e._v(" "),n("ol",[n("li",[e._v("子组件数据使用 value 属性")]),e._v(" "),n("li",[e._v("子组件当数据更新时，使用 "),n("code",[e._v("$emit")]),e._v(" 方法调用父组件的 "),n("code",[e._v("input")]),e._v(" 事件")])]),e._v(" "),n("p",[e._v("当然父组件使用 v-model 后，我们就不需要声明 @input 事件了，因为 v-model 就包含处理 input 事件。")])])},[],!1,null,null,null);t.default=r.exports}}]);