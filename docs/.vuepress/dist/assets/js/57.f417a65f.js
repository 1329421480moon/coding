(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{272:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"workerman-聊天室"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workerman-聊天室","aria-hidden":"true"}},[e._v("#")]),e._v(" WORKERMAN 聊天室")]),e._v(" "),a("p",[a("img",{attrs:{src:"assets/1526631364812-1710750.png",alt:"1526631364812"}})]),e._v(" "),a("blockquote",[a("p",[e._v("houdunren.com 后盾人 人人做后盾  作者：向军大叔")])]),e._v(" "),a("p",[e._v("GatewayWorker基于Workerman开发的一个框架，支持多协议多端口监听，支持分布式多机部署，用于快速开发长连接应用，例如移动通讯、物联网、智能家居、游戏服务端、聊天室等等。")]),e._v(" "),a("p",[e._v("手册： http://www.workerman.net/gatewaydoc/license/README.html")]),e._v(" "),a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础","aria-hidden":"true"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),a("h4",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("安装workerman")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("composer require workerman/gateway-worker\n")])])])]),e._v(" "),a("li",[a("p",[e._v("下载包: http://www.workerman.net/download/GatewayWorker.zip 解压后放在项目根目录，并更名为 socket")])])]),e._v(" "),a("h4",{attrs:{id:"启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动")]),e._v(" "),a("p",[e._v("以debug（调试）方式启动")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("php socket/start.php start\n")])])]),a("p",[e._v("以daemon（守护进程）方式启动，生产环境使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("php socket/start.php start -d\n")])])]),a("p",[e._v("停止")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("php socket/start.php stop\n")])])]),a("h4",{attrs:{id:"查看端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看端口","aria-hidden":"true"}},[e._v("#")]),e._v(" 查看端口")]),e._v(" "),a("p",[e._v("查看"),a("code",[e._v("socket/Applications/YourApp/start_gateway.php")]),e._v("  文件中的端口设置，并修改协议为 "),a("code",[e._v("websocket")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// gateway 进程，这里使用Text协议，可以用telnet测试\n$gateway = new Gateway("websocket://0.0.0.0:8282");\n')])])]),a("p",[e._v("前端连接")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script>\n    let socket = new WebSocket("ws://laravel.hd:8282");\n    socket.onmessage = function(response){\n        console.log(response);\n    }\n<\/script>\n')])])]),a("p",[e._v("后台脚本")]),e._v(" "),a("p",[a("code",[e._v("socket/Applications/YourApp/Events.php")]),e._v(" 文件包含了用户连接、发送、关闭等事件处理。")]),e._v(" "),a("h2",{attrs:{id:"php框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php框架","aria-hidden":"true"}},[e._v("#")]),e._v(" PHP框架")]),e._v(" "),a("p",[e._v("使用GatewayWorker时开发者最关心的是如何与现有mvc框架(ThinkPHP Yii laravel等)整合，以下是官方推荐的整合方式。见示意图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"assets/image-20180417232643165.png",alt:"image-20180417232643165"}})]),e._v(" "),a("blockquote",[a("p",[e._v("以下示例为"),a("code",[e._v("laravel 5.6")]),e._v(" 框架，用户注册登录非本章讨论内容，请自行开发。")])]),e._v(" "),a("h4",{attrs:{id:"workerman配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workerman配置","aria-hidden":"true"}},[e._v("#")]),e._v(" workerman配置")]),e._v(" "),a("p",[e._v("修改"),a("code",[e._v("socket/Applications/YourApp/events.php")]),e._v("  如下:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php\nuse \\GatewayWorker\\Lib\\Gateway;\nclass Events\n{\n   //用户连接socket时执行\n   public static function onConnect($client_id) {\n        Gateway::sendToClient($client_id, json_encode([\n            'type'      => 'init',\n            'client_id' => $client_id,\n        ]));\n   }\n   //框架处理用户消息，所以不需要设置\n   public static function onMessage($client_id, $message) {\n   }\n   //框架处理用户消息，所以不需要设置\n   public static function onClose($client_id) {\n   }\n}\n\n")])])]),a("h4",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//聊天室\nRoute::get('chat/index', 'ChatController@index')->name('chat.index');\n//欢迎新用户\nRoute::get('chat/welcome', 'ChatController@welcome')->name('chat.welcome');\n//发送聊天信息\nRoute::post('chat/send', 'ChatController@send')->name('chat.send');\n")])])]),a("h4",{attrs:{id:"控制器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制器","aria-hidden":"true"}},[e._v("#")]),e._v(" 控制器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<?php namespace App\\Http\\Controllers;\nuse GatewayWorker\\Lib\\Gateway;\nuse Illuminate\\Http\\Request;\nuse Auth;\n\nclass ChatController extends Controller\n{\n    public function __construct()\n    {\n    \t//设置socket地址\n        Gateway::$registerAddress = '127.0.0.1:1238';\n    }\n\t//欢迎用户\n    public function welcome()\n    {\n        $user = Auth::user();\n        Gateway::sendToAll(json_encode([\n            'type'=>'welcome',\n            'name'=>$user['name']\n        ]));\n    }\n\t//发送消息处理\n    public function send(Request $request)\n    {\n        Gateway::sendToAll(json_encode([\n            'type'=>'message',\n            'name'=>Auth::user()->name,\n            'content'=>$request->input('content')\n        ]));\n    }\n\t//聊天页面\n    public function index()\n    {\n        if ( ! \\Auth::check()) {\n            session()->flash('danger', '请登录后再聊天');\n\n            return redirect()->route('login');\n        }\n\n        return view('chat.index');\n    }\n}\n")])])]),a("h4",{attrs:{id:"vue组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件","aria-hidden":"true"}},[e._v("#")]),e._v(" vue组件")]),e._v(" "),a("p",[a("strong",[e._v("配置vue应用")])]),e._v(" "),a("p",[e._v("修改 "),a("code",[e._v("resources/assets/js/app.js")]),e._v(" 文件为vue应用添加组件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Vue.component('hd-chat', require('./components/HdChat.vue'));\n")])])]),a("p",[a("strong",[e._v("创建组件")])]),e._v(" "),a("p",[e._v("创建 "),a("code",[e._v("resources/assets/js/components/HdChat.vue")]),e._v(" 聊天室组件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<template> \n    <div class="container">\n        <div class="card">\n            <div class="card-header">聊天室</div>\n            <div class="card-block">\n                <div class="chat-lists container">\n                    <ul id="chats"></ul>\n                </div>\n            </div>\n            <div class="card-footer text-muted">\n                <form action="">\n                    <div class="form-group">\n                        <textarea class="form-control" name="content" rows="3" @keyup.enter="send()"></textarea>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</template>\n<style lang="scss">\n    .chat-lists {\n        padding: 20px;\n        ul {\n            li {\n                font-size: 16px;\n                b{\n                    color:seagreen;\n                }\n            }\n        }\n    }\n</style>\n<script>\n    export default {\n        mounted() {\n            //连接SOCKET\n            let socket = new WebSocket("ws://laravel.hd:8282");\n            //绑定SOCKET会话处理\n            socket.onmessage = this.message;\n        },\n        data() {\n            return {}\n        },\n        methods: {\n            message(response) {\n                var data = JSON.parse(response.data);\n                switch (data.type) {\n                    case \'init\':\n                        axios.get(\'/chat/welcome\');\n                        break;\n                    case \'welcome\':\n                        //欢迎新同学\n                        this.push("欢迎 <b>" + data.name + "</b> 来到直播间");\n                        break;\n                    case \'message\':\n                        //聊天消息\n                        let content = \'<b>\' + data.name + \'</b> 说：\' + data.content;\n                        this.push(content);\n                        break;\n                }\n            },\n            send() {\n                var con = $.trim($("[name=\'content\']").val());\n                if (con) {\n                    axios.post(\'/chat/send\', {content: con});\n                    $("[name=\'content\']").val(\'\');\n                }\n            },\n            push(message) {\n                var li = "<li>" + message + "</li>";\n                $("#chats").prepend(li);\n            }\n        }\n    }\n<\/script>\n')])])])])},[],!1,null,null,null);t.default=s.exports}}]);