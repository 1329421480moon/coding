(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{273:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"phpunit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#phpunit","aria-hidden":"true"}},[e._v("#")]),e._v(" phpunit")]),e._v(" "),s("h2",{attrs:{id:"安装配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装配置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("composer require --dev phpunit/phpunit\n")])])]),s("h2",{attrs:{id:"配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),s("p",[e._v("定义 "),s("code",[e._v("phpunit.xml")]),e._v(" 配置文件 ，当执行 "),s("code",[e._v("./vendor/phpunit")]),e._v(" 命令时系统会按这个配置执行。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<phpunit backupGlobals="false"\n         backupStaticAttributes="false"\n         bootstrap="vendor/autoload.php"\n         colors="true"\n         convertErrorsToExceptions="true"\n         convertNoticesToExceptions="true"\n         convertWarningsToExceptions="true"\n         processIsolation="false"\n         stopOnFailure="false"\n         syntaxCheck="false"\n>\n    <testsuites>\n        <testsuite name="Prettus Repository Test Suite">\n            <directory suffix=".php">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n')])])]),s("h2",{attrs:{id:"命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名规范","aria-hidden":"true"}},[e._v("#")]),e._v(" 命名规范")]),e._v(" "),s("ul",[s("li",[e._v("测试用例目录要与项目目录结构一致")]),e._v(" "),s("li",[e._v("测试用户类名为：项目类名+Test.php")]),e._v(" "),s("li",[e._v("测试用例要继承 "),s("code",[e._v("PHPUnit\\Framework\\TestCase")]),e._v(" 类")]),e._v(" "),s("li",[e._v("测试用户方法为："),s("code",[e._v("test")]),e._v("+项目类方法")])]),e._v(" "),s("h2",{attrs:{id:"模拟对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模拟对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 模拟对象")]),e._v(" "),s("p",[e._v("如果测试A 类，但A类依赖 B 类，B类可能是一个http请求或数据库等操作。我们不希望测试A类时过多考虑B类业务。")]),e._v(" "),s("p",[e._v("但在 A 类的函数代码确实需要 B 类，这时可以使用 mock 机制处理，即我们在A类中使用的B类是假的（模拟出来的）。")]),e._v(" "),s("p",[e._v("使用mock机制的如片：")]),e._v(" "),s("ul",[s("li",[e._v("只专心测试A类")]),e._v(" "),s("li",[e._v("不用为了A类配置数据库或http测试环境")])]),e._v(" "),s("p",[e._v("示例如下：")]),e._v(" "),s("p",[e._v("数据库类")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Db\n{\n    public function query()\n    {\n        return 'houdunren';\n    }\n}\n")])])]),s("p",[e._v("用户类")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class User\n{\n    public function link()\n    {\n        return new Db();\n    }\n\n    public function get()\n    {\n        return $this->link()->query();\n    }\n}\n")])])]),s("p",[e._v("现在我们看到 "),s("code",[e._v("User")]),e._v(" 类依赖 "),s("code",[e._v("Db")]),e._v("类，我们要对User类中的get方法做单元测试，但不想考虑Db类（即不想做数据库连接配置等操作）。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class UserTest extends TestCase\n{\n    public function testGet()\n    {\n        //创建虚拟Db类\n        $db = \\Mockery::mock(Db::class);\n\n        //定义虚拟Db的query方法返回值\n        $db->allows()->query()->andReturn('这是mock的返回值，不是真正的db返回值');\n\n        //虚拟出User类，并允许调用父类（真正的User类）的方法\n        $user = \\Mockery::mock(User::class)->makePartial();\n\n        //调用User类的link方法并设置返回值为上面创建的虚拟Db对象\n        $user->allows()->link()->andReturn($db);\n\n        //这时操作get方法时使用的Db对象都是虚拟对象\n        $this->assertSame('这是mock的返回值，不是真正的db返回值', $res);\n    }\n}\n")])])]),s("p",[e._v("测试结果")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("PHPUnit 6.1.0 by Sebastian Bergmann and contributors.\n\n.                                                                   1 / 1 (100%)\n\nTime: 86 ms, Memory: 10.00MB\n\nOK (1 test, 1 assertion)\n")])])]),s("h2",{attrs:{id:"异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理","aria-hidden":"true"}},[e._v("#")]),e._v(" 异常处理")]),e._v(" "),s("p",[e._v("定义测试代码中使用的异常，phpunit将 try 这个异常，如果不使用这个方法将可能触发业务代码的异常造成测试中断。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class User\n{\n    public function get($id)\n    {\n        if (!is_numeric($id)) {\n            throw new \\Exception('invalid param $id');\n        }\n\t\t return true;\n    }\n}\n")])])]),s("p",[e._v("下面测试调用 "),s("code",[e._v("User::get")]),e._v("  方法时传入无效参数时的业务逻辑。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public function testUserInvalidExtensions()\n{\n\t$user = new User();\n\t$this->expectException(\\Exception::class);\n\t$this->expectExceptionMessage('invalid param hd'); \n\t$user->get('hd');\n\t$this->fail('未能捕获异常，断言失败');\n}\n")])])]),s("p",[e._v("当传入无效参数 "),s("code",[e._v("hd")]),e._v(" 时，因为定义了预期异常处理 "),s("code",[e._v("$this->expectException(\\Exception::class);")]),e._v(" 与 "),s("code",[e._v("$this->expectExceptionMessage('invalid param $id');")]),e._v(" 如果抛出的异常与错误消息与预期一致，测试通过，否则执行 "),s("code",[e._v("$this->fail()")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断言","aria-hidden":"true"}},[e._v("#")]),e._v(" 断言")]),e._v(" "),s("h3",{attrs:{id:"assertsame"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assertsame","aria-hidden":"true"}},[e._v("#")]),e._v(" assertSame")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("assertSame(mixed $expected, mixed $actual[, string $message = ''])\n")])])]),s("p",[e._v("当两个变量 "),s("code",[e._v("$expected")]),e._v(" 和 "),s("code",[e._v("$actual")]),e._v(" 的值与类型不完全相同时报告错误，错误讯息由 "),s("code",[e._v("$message")]),e._v(" 指定。")]),e._v(" "),s("p",[s("code",[e._v("assertNotSame()")]),e._v(" 是与之相反的断言，接受相同的参数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public function testFailure()\n{\n\t$this->assertSame('2204', 2204);\n}\n")])])]),s("h3",{attrs:{id:"assertequals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assertequals","aria-hidden":"true"}},[e._v("#")]),e._v(" assertEquals")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("assertEquals(mixed $expected, mixed $actual[, string $message = ''])\n")])])]),s("p",[e._v("当两个变量 "),s("code",[e._v("$expected")]),e._v(" 和 "),s("code",[e._v("$actual")]),e._v(" 不相等时报告错误，错误讯息由 "),s("code",[e._v("$message")]),e._v(" 指定。")]),e._v(" "),s("p",[s("code",[e._v("assertNotEquals()")]),e._v(" 是与之相反的断言，接受相同的参数。")])])},[],!1,null,null,null);t.default=n.exports}}]);